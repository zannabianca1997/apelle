# Program configuration
apelle:
  queue:
    user:
      # The role that will be given by default to every user in any queue
      default-role: VOTER
      # The role of the creator of the queue
      creator-role: PLAYER
      # The role of banned users
      banned-role: OBSERVER
      # Config of the roles
      roles:
        PLAYER:
          max-likes: 32767
          permissions:
            start-song: true
            stop-song: true
            next-song: true
            like-song: true
            enqueue: true
        VOTER:
          max-likes: 4
          permissions:
            start-song: false
            stop-song: false
            next-song: false
            like-song: true
            enqueue: true
        OBSERVER:
          max-likes: 0
          permissions:
            start-song: false
            stop-song: false
            next-song: false
            like-song: false
            enqueue: false
  songs:
    sources:
      youtube:
        api-uri: &yt-api https://www.googleapis.com/youtube/v3
        watch-uri: https://www.youtube.com/watch

# Quarkus configuration
quarkus:
  # Database: the application for now support only PostgreSQL
  datasource:
    db-kind: postgresql
  # Run basic globally
  http:
    auth:
      basic: true
  # External APIs urls
  rest-client:
    youtube-api:
      url: *yt-api
  # Configuration of the Swagger
  smallrye-openapi:
    info-title: Apelle API
    info-version: ${quarkus.application.version:-}
    info-description: |-
      > A communist music queue

      `apelle` is a backend for handling a shared music queue. 
      Users can insert songs in the queues, and upvote them to push them upward. `apelle`
      will track the position of each song in the queue, and the position of the currently
      playing song.

      It also fetch the song data from the sources (for now, only Youtube is supported).
      Users provides only the minimal necessary to identify the song (e.g. the youtube video ID).

      ### Websockets
      To avoid polling the REST API, `apelle` provide a websocket interface to each queue.
      The relative URL is `/queues/{queueId}/ws`. It needs basic auth to connect.

      The websocket does not listen for now to any message, but sends JSON messages at each queue change.
      See the `ServerMessage` schema for the schema.
    info-contact-name: zannabianca1997
    info-contact-email: zannabianca199712@gmail.com
    info-license-name: MIT
    info-license-url: https://opensource.org/license/mit
  swagger-ui:
    deep-linking: true
  quinoa:
    build-dir: build
    package-manager-install:
      npm-version: 10.5.2
      node-version: 20.13.1
    enable-spa-routing: true

# Setup during Dev
"%dev":
  quarkus:
    hibernate-orm:
      database:
        # in dev mode only, create all the tables at startup
        generation: drop-and-create
    quinoa:
      dev-server:
        index-page: /
        port: 3000
    smallrye-openapi:
      info-title: Apelle API (development)
# Setup during tests
"%test":
  quarkus:
    smallrye-openapi:
      info-title: Apelle API (test)
    rest-client:
      youtube-api:
        # Do not contact youtube during tests
        url:
